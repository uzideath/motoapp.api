// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
  output        = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Owners {
  id           String   @id @default(cuid())
  username     String   @unique
  passwordHash String
  roles        Role[]   @default([USER])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id             String   @id @default(uuid())
  name           String
  identification String   @unique
  age            Int
  phone          String
  address        String
  refName        String
  refID          String
  refPhone       String
  createdAt      DateTime @default(now())

  loans Loan[]
}

model Motorcycle {
  id    String  @id @default(uuid())
  brand String
  model String
  plate String  @unique
  color String?
  cc    Int?
  gps   Float?
  loans Loan[]
}

model Loan {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  motorcycle                Motorcycle @relation(fields: [motorcycleId], references: [id])
  motorcycleId              String
  totalAmount               Float
  downPayment               Float // âœ… Added this field
  installments              Int
  paidInstallments          Int        @default(0)
  remainingInstallments     Int
  totalPaid                 Float      @default(0.0)
  debtRemaining             Float
  interestRate              Float // If you use this field
  interestType              String // (e.g., "FIXED", consider using an enum!)
  paymentFrequency          String // (e.g., "DAILY", consider using an enum!)
  installmentPaymentAmmount Float

  startDate DateTime   @default(now())
  endDate   DateTime?
  status    LoanStatus @default(PENDING)

  payments Installment[]
}

model Installment {
  id            String        @id @default(uuid())
  loan          Loan          @relation(fields: [loanId], references: [id])
  loanId        String
  paymentMethod PaymentMethod
  amount        Float
  paymentDate   DateTime      @default(now())
  isLate        Boolean       @default(false)

  cashRegister   CashRegister? @relation("CashRegisterPayments", fields: [cashRegisterId], references: [id])
  cashRegisterId String?
}

model CashRegister {
  id                String   @id @default(uuid())
  date              DateTime @default(now())
  cashInRegister    Float
  cashFromTransfers Float
  cashFromCards     Float
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  payments Installment[] @relation("CashRegisterPayments")
  expense  Expense[]
}

model Expense {
  id             String          @id @default(uuid())
  amount         Float
  date           DateTime
  category       ExpenseCategory
  paymentMethod  PaymentMethod
  beneficiary    String
  reference      String?
  description    String
  attachments    String[] // Array de archivos relacionados (recibos, facturas)
  cashRegister   CashRegister?   @relation(fields: [cashRegisterId], references: [id])
  cashRegisterId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ExpenseCategory {
  RENT // Alquiler
  SERVICES // Servicios
  SALARIES // Salarios
  TAXES // Impuestos
  MAINTENANCE // Mantenimiento
  PURCHASES // Compras
  MARKETING // Marketing
  TRANSPORT // Transporte
  OTHER // Otros
}

enum PaymentMethod {
  CARD
  CASH
  TRANSACTION
}

enum LoanStatus {
  PENDING
  ACTIVE
  COMPLETED
  DEFAULTED
}

enum Role {
  USER
  ADMIN
  MODERATOR
}
